// src/pages/DevicePage.js
import React, { useState, useEffect } from 'react';
import { Link, useParams, useNavigate } from 'react-router-dom';
import { firebaseService } from '../services/firebase';
import { deviceService, dispensingService } from '../services/api';
import Loader from '../components/common/Loader';
import ErrorMessage from '../components/common/ErrorMessage';
import { useAuth } from '../contexts/AuthContext';

const DevicePage = () => {
  const { deviceId } = useParams();
  const navigate = useNavigate();
  const { setCurrentDevice } = useAuth();
  
  const [device, setDevice] = useState(null);
  const [chemicals, setChemicals] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Save current device ID to context
  useEffect(() => {
    if (deviceId) {
      setCurrentDevice(deviceId);
    }
  }, [deviceId, setCurrentDevice]);
  
  // Fetch device data and chemicals
  useEffect(() => {
    const fetchDeviceData = async () => {
      setLoading(true);
      setError(null);
      
      try {
        // Try to fetch from API first
        try {
          const deviceResponse = await deviceService.getDeviceById(deviceId);
          
          if (deviceResponse.success) {
            setDevice({
              id: deviceId,
              ...deviceResponse.data
            });
          }
        } catch (apiError) {
          console.error('API error, falling back to Firebase:', apiError);
          
          // Fallback to Firebase
          const deviceInfo = await firebaseService.getDeviceInfo(deviceId);
          
          if (!deviceInfo) {
            setError('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            setLoading(false);
            return;
          }
          
          if (deviceInfo.status !== 'active') {
            setError('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç');
            setLoading(false);
            return;
          }
          
          setDevice({
            id: deviceId,
            ...deviceInfo
          });
        }
        
        // Try to fetch chemicals from API
        try {
          const chemicalsResponse = await dispensingService.getAvailableChemicals(deviceId);
          
          if (chemicalsResponse.success) {
            setChemicals(chemicalsResponse.data.chemicals || []);
          }
        } catch (apiError) {
          console.error('API error fetching chemicals, falling back to Firebase:', apiError);
          
          // Fallback to Firebase
          const containersData = await firebaseService.getDeviceContainers(deviceId);
          setChemicals(containersData);
        }
      } catch (error) {
        console.error('Error fetching device data:', error);
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
      } finally {
        setLoading(false);
      }
    };
    
    fetchDeviceData();
  }, [deviceId]);
  
  // Handle chemical selection
  const handleSelectChemical = (chemical) => {
    navigate(`/dispensing/${deviceId}/${chemical.id}`);
  };
  
  if (loading) {
    return (
      <div className="eco-loader-container">
        <Loader size="large" text="–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ..." />
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="eco-error-container">
        <ErrorMessage message={error} />
        <Link to="/" className="eco-button">
          –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        </Link>
      </div>
    );
  }
  
  return (
    <div className="eco-device-page">
      <div className="eco-page-header">
        <Link to="/" className="eco-back-link">
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        </Link>
        <h1>{device?.name || `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceId}`}</h1>
        <div className="eco-device-info">
          <p className="eco-device-location">
            <span className="eco-location-icon">üìç</span> {device?.location || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏'}
          </p>
          <div className="eco-device-status">
            <span className={`eco-device-status-dot active`}></span> –î–æ—Å—Ç—É–ø–Ω–æ
          </div>
        </div>
      </div>
      
      <div className="eco-section">
        <h2>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞</h2>
        
        <div className="eco-chemicals-grid">
          {chemicals.length > 0 ? (
            chemicals.map(chemical => (
              <div key={chemical.id} className="eco-chemical-card">
                <div className="eco-chemical-content">
                  <h3>{chemical.name}</h3>
                  <p className="eco-chemical-description">
                    {chemical.description || '–°—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–æ–∑–∏—Ä—É—é—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ'}
                  </p>
                  
                  <div className="eco-chemical-level">
                    <div className="eco-chemical-level-label">–£—Ä–æ–≤–µ–Ω—å:</div>
                    <div className="eco-chemical-level-bar">
                      <div 
                        className={`eco-chemical-level-fill ${chemical.level < 20 ? 'low' : ''}`} 
                        style={{width: `${chemical.level}%`}}
                      ></div>
                    </div>
                    <div className="eco-chemical-level-value">{chemical.level}%</div>
                  </div>
                  
                  <div className="eco-chemical-price">
                    <span className="eco-price-label">–¶–µ–Ω–∞:</span>
                    <span className="eco-price-value">{chemical.price} —Ç–µ–Ω–≥–µ/–ª–∏—Ç—Ä</span>
                  </div>
                </div>
                
                <div className="eco-chemical-actions">
                  <button 
                    className="eco-button full-width"
                    onClick={() => handleSelectChemical(chemical)}
                    disabled={chemical.level < 5}
                  >
                    {chemical.level < 5 ? '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏' : '–í—ã–±—Ä–∞—Ç—å'}
                  </button>
                </div>
              </div>
            ))
          ) : (
            <div className="eco-empty-state">
              <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</p>
            </div>
          )}
        </div>
      </div>
      
      <div className="eco-section">
        <h2>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å</h2>
        <div className="eco-instructions">
          <div className="eco-instruction-step">
            <div className="eco-instruction-number">1</div>
            <div className="eco-instruction-text">
              <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–æ</h3>
              <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å" –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –Ω—É–∂–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞</p>
            </div>
          </div>
          
          <div className="eco-instruction-step">
            <div className="eco-instruction-number">2</div>
            <div className="eco-instruction-text">
              <h3>–£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–º</h3>
              <p>–ù–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç–∫—Ä–∞–Ω–µ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –æ–±—ä–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞</p>
            </div>
          </div>
          
          <div className="eco-instruction-step">
            <div className="eco-instruction-number">3</div>
            <div className="eco-instruction-text">
              <h3>–û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ Kaspi</h3>
              <p>–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–º–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã Kaspi</p>
            </div>
          </div>
          
          <div className="eco-instruction-step">
            <div className="eco-instruction-number">4</div>
            <div className="eco-instruction-text">
              <h3>–ü–æ–ª—É—á–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–æ</h3>
              <p>–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–Ω–µ—Å–∏—Ç–µ —Ç–∞—Ä—É –∫ –¥–æ–∑–∞—Ç–æ—Ä—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ</p>
            </div>
          </div>
        </div>
      </div>
      
      <div className="eco-contact-box">
        <h3>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</h3>
        <p>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:</p>
        <div className="eco-contact-methods">
          <a href="tel:+77001234567" className="eco-contact-method">
            <span className="eco-contact-icon">üìû</span> +7 (700) 123-45-67
          </a>
          <a href="https://t.me/ecotrend" className="eco-contact-method">
            <span className="eco-contact-icon">üì±</span> Telegram
          </a>
        </div>
      </div>
    </div>
  );
};

export default DevicePage;